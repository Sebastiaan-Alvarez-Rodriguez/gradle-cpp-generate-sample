plugins {
    id 'cpp-application'
}


def codeGeneration = tasks.register("codeGeneration", CodeGenerator) {
    cppDir = file("src/main/generated/") //project.layout.buildDirectory.dir("generated/cpp")
    headersDir = file("src/main/generated/") //project.layout.buildDirectory.dir("generated/headers")
}


// Set the target operating system and architecture for this application
application {
    targetMachines.add(machines.linux.x86_64)
    source.from {
        codeGeneration.flatMap { it.cppDir }
        file("src/main/cpp")
    }
    privateHeaders.from codeGeneration.flatMap { it.headersDir }
}


//model {
//    components {
//        otherlib(NativeLibrarySpec) {
//            sources.cpp {
//                builtBy tasks.codeGeneration
//            }
//        }
//    }
//}

// Code generation implementation could be in another plugin or buildSrc
class CodeGenerator extends DefaultTask {
@OutputDirectory
DirectoryProperty cppDir = project.objects.directoryProperty()

@OutputDirectory
DirectoryProperty headersDir = project.objects.directoryProperty()

@TaskAction
public void generate() {
    generateSources(cppDir.getAsFile().get())
    generateHeaders(headersDir.getAsFile().get())
}

private void generateSources(File generatedDir) {
    new File(generatedDir, "gen.cpp").text = """
#include "test.h"
#include "gen.h"
    extern int yylineno;
    int lineno = 1;

    void testprint(Test t) {
        t.print();
    }
    """
}
private void generateHeaders(File generatedDir) {
    new File(generatedDir, "gen.h").text = """
#ifndef __GEN_H__
#define __GEN_H__ \
#include "test.h"

    void testprint(Test t);

#endif
"""
}
}